# from numpy import array, cos, sin
import torch
from torch import cos, sin

def forward_kinematics(q):
    '''
    Forward kinematics of the Kinova Gen3 robot
    
    Arguments
    ---------
    q : tensor_like
        The joint angles of the robot
        
    Returns
    -------
    ndarray
        The end-effector position
    ndarray
        The rotation matrix of the end-effector
    '''
    
    q1 = q[:,0].reshape(-1,1)
    q2 = q[:,1].reshape(-1,1)
    q3 = q[:,2].reshape(-1,1)
    q4 = q[:,3].reshape(-1,1)
    q5 = q[:,4].reshape(-1,1)
    q6 = q[:,5].reshape(-1,1)
    q7 = q[:,6].reshape(-1,1)
    
    x0 = sin(q1)
    x1 = cos(q3)
    x2 = x0*x1
    x3 = cos(q1)
    x4 = sin(q2)
    x5 = x3*x4
    x6 = cos(q4)
    x7 = x5*x6
    x8 = cos(q2)
    x9 = sin(q3)
    x10 = x3*x9
    x11 = x10*x8
    x12 = sin(q4)
    x13 = x0*x9
    x14 = x1*x3
    x15 = -x13 + x14*x8
    x16 = x12*x15
    x17 = cos(q6)
    x18 = -x16 - x7
    x19 = x17*x18
    x20 = sin(q6)
    x21 = sin(q5)
    x22 = x11 + x2
    x23 = cos(q5)
    x24 = -x12*x5 + x15*x6
    x25 = -x21*x22 + x23*x24
    x26 = x20*x25
    x27 = x0*x4
    x28 = x27*x6
    x29 = x13*x8
    x30 = -x10 - x2*x8
    x31 = x12*x30
    x32 = x28 - x31
    x33 = x17*x32
    x34 = x14 - x29
    x35 = x12*x27 + x30*x6
    x36 = -x21*x34 + x23*x35
    x37 = x20*x36
    x38 = x4*x9
    x39 = x6*x8
    x40 = x1*x4
    x41 = x12*x40
    x42 = -x39 + x41
    x43 = x17*x42
    x44 = -x12*x8 - x40*x6
    x45 = x21*x38 + x23*x44
    x46 = x20*x45
    x47 = sin(q7)
    x48 = x21*x24 + x22*x23
    x49 = cos(q7)
    x50 = x17*x25 + x18*x20
    x51 = x21*x35 + x23*x34
    x52 = x17*x36 + x20*x32
    x53 = x21*x44 - x23*x38
    x54 = x17*x45 + x20*x42
    # print("x0: ", x0)
    return [torch.cat([-0.0118*x0 - 0.0128*x11 + 0.3143*x16 - 0.1674*x19 - 0.0128*x2 + 0.1674*x26 + 0.4208*x5 + 0.3143*x7, 
                         -0.0128*x14 - 0.4208*x27 - 0.3143*x28 + 0.0128*x29 - 0.0118*x3 + 0.3143*x31 - 0.1674*x33 + 0.1674*x37, 
                         0.0128*x38 + 0.3143*x39 - 0.3143*x41 - 0.1674*x43 + 0.1674*x46 + 0.4208*x8 + 0.2848],dim=1), 
            torch.cat([torch.cat([-x47*x48 + x49*x50, x47*x50 + x48*x49, -x19 + x26], dim=1),
                        torch.cat([-x47*x51 + x49*x52, x47*x52 + x49*x51, -x33 + x37], dim=1),
                        torch.cat([-x47*x53 + x49*x54, x47*x54 + x49*x53, -x43 + x46], dim=1)],dim=1).reshape(-1,3,3)]

if __name__ =="__main__":
    a = torch.tensor([[ 0.5916,  0.1637,  3.5408, -1.7940,  0.2929, -1.3853,  1.3758],
        [ 0.0287,  0.4424,  3.2034, -1.2578,  0.0733, -0.8920,  1.7409],
        [-0.2148,  0.3270,  2.9010, -1.3962, -0.1709, -0.7316,  1.5776],
        [-0.0899,  0.2173,  3.0950, -1.2453, -0.1181, -1.0488,  1.2216],
        [-0.2583,  0.3320,  2.7536, -1.4959, -0.2698, -0.9183,  1.9752],
        [ 0.1975,  0.5177,  3.5395, -2.1016,  0.2382, -1.1692,  1.3907],
        [-0.2828,  0.3427,  2.7148, -2.0199, -0.2519, -1.2144,  1.9516],
        [ 0.2137,  0.4612,  3.9337, -1.4971,  0.4815, -1.0294,  1.4509],
        [-0.1862,  0.3844,  2.6165, -1.4271, -0.4117, -1.2778,  1.8097],
        [ 0.0925,  0.3828,  3.2790, -1.3293,  0.1052, -0.7747,  1.4290],
        [ 0.1758,  0.1775,  3.2667, -1.2516,  0.1754, -0.9880,  1.4669],
        [ 0.1170,  0.3885,  3.2615, -2.4124, -0.0241, -0.9783,  1.0326],
        [ 0.2009,  0.2105,  3.3032, -1.1830,  0.1550, -0.7060,  1.4925],
        [ 0.2570,  0.3469,  3.6439, -1.3726,  0.2817, -0.7998,  1.4438],
        [-0.2208,  0.4404,  2.5075, -1.3996, -0.3808, -0.8364,  1.3956],
        [-0.0994,  0.4339,  3.0247, -2.2344, -0.0818, -1.1157,  1.3388]],
       device='cuda:0')
    b = torch.tensor([1,1,2,2]).reshape(-1,1)
    c = torch.tensor([2,3,4,5]).reshape(-1,1)
    # print(b*c)
    print(forward_kinematics(a))
